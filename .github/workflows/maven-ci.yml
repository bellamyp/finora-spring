name: Java CI with Maven

on:
  push:
    branches: [ '**' ] # Run on every branch push
  pull_request:
    branches: [ main ] # Run on PRs to main

jobs:
  build:
    runs-on: ubuntu-latest # Use Ubuntu environment

    env:
      # Inject secrets into environment
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      # Checkout the code from your repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Java (use the same version as your project)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run Tests and Check Coverage
        run: mvn clean verify
        # Explanation:
        # 'mvn clean verify' does everything you need in CI:
        # 1. Cleans previous build artifacts (clean)
        # 2. Compiles the code (compile phase)
        # 3. Runs unit tests (test phase)
        # 4. Packages the application into a JAR/WAR (package phase)
        # 5. Runs verification steps like JaCoCo coverage checks (verify phase)
        #
        # So, you do NOT need a separate 'mvn package' step.
        # This simplifies the workflow, runs tests once, enforces coverage,
        # and still produces the JAR artifact.
